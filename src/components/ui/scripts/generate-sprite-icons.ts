// orginally from https://github.com/epicweb-dev/epic-stack/blob/main/other/build-icons.ts

import fsExtra from 'fs-extra'
import { glob } from 'glob'
import { parse } from 'node-html-parser'
import * as path from 'node:path'

const cwd = process.cwd()
const rootDir = path.join(cwd)
const iconsDir = path.join(cwd, 'src', 'components', 'ui', 'icons')
const inputDir = path.join(iconsDir, 'svg')
const inputDirRelative = path.relative(cwd, inputDir)
const generatedDir = path.join(iconsDir, 'generated')
const outputDir = path.join(rootDir, 'public', 'icons')

console.log('Current working directory:', process.cwd())
console.log('Looking for SVG files in:', inputDir)
console.log('Relative path to SVG directory:', inputDirRelative)

async function main() {
  const files = glob
    .sync('**/*.svg', {
      cwd: inputDir,
    })
    .sort((a, b) => a.localeCompare(b))

  const shouldVerboseLog = process.argv.includes('--log=verbose')
  const logVerbose = shouldVerboseLog ? console.log : () => {}

  if (files.length === 0) {
    console.log(`No SVG files found in ${inputDirRelative}`)
  } else {
    await generateIconFiles()
  }

  async function generateIconFiles() {
    const spriteFilepath = path.join(outputDir, 'sprite.svg')
    const typeOutputFilepath = path.join(generatedDir, 'icon-name.d.ts')
    const arrayOutputFilepath = path.join(generatedDir, 'icon-names.ts')
    const currentSprite = await fsExtra.readFile(spriteFilepath, 'utf8').catch(() => '')
    const currentTypes = await fsExtra.readFile(typeOutputFilepath, 'utf8').catch(() => '')

    const iconNames = files.map((file) => iconName(file))

    const spriteUpToDate = iconNames.every((name) => currentSprite.includes(`id=${name}`))
    const typesUpToDate = iconNames.every((name) => currentTypes.includes(`"${name}"`))

    if (spriteUpToDate && typesUpToDate) {
      logVerbose(`Icons are up to date`)
      return
    }

    logVerbose(`Generating sprite for ${inputDirRelative}`)

    const spriteChanged = await generateSvgSprite({
      files,
      inputDir,
      outputPath: spriteFilepath,
    })

    for (const file of files) {
      logVerbose('âœ…', file)
    }
    logVerbose(`Saved to ${path.relative(cwd, spriteFilepath)}`)

    const stringifiedIconNames = iconNames.map((name) => `'${name}'`)
    const outputGeneratedContent = `// This file is generated by yarn generate:icons`
    const outputTypeContent = `${outputGeneratedContent}\nexport type IconName =\n  | ${stringifiedIconNames.join(
      '\n  | ',
    )}\n`
    const typesChanged = await writeIfChanged(typeOutputFilepath, outputTypeContent)
    const outputArrayContent = `${outputGeneratedContent}\nexport const IconNames = [\n  ${stringifiedIconNames.join(
      ',\n  ',
    )},\n]\n`
    const arrayChanged = await writeIfChanged(arrayOutputFilepath, outputArrayContent)

    if (spriteChanged || typesChanged || arrayChanged) {
      console.log(`Generated ${files.length} icons`)
    }
  }

  function iconName(file: string) {
    return file
      .split('/')[1]
      .replace(/\.svg$/, '')
      .replace(/\\/g, '/')
  }

  /**
   * Creates a single SVG file that contains all the icons
   */
  async function generateSvgSprite({
    files,
    inputDir,
    outputPath,
  }: {
    files: string[]
    inputDir: string
    outputPath: string
  }) {
    // Each SVG becomes a symbol and we wrap them all in a single SVG
    const symbols = await Promise.all(
      files.map(async (file) => {
        const input = await fsExtra.readFile(path.join(inputDir, file), 'utf8')
        const root = parse(input)

        const svg = root.querySelector('svg')
        if (!svg) throw new Error('No SVG element found')

        svg.tagName = 'symbol'
        svg.setAttribute('id', iconName(file))
        svg.removeAttribute('xmlns')
        svg.removeAttribute('xmlns:xlink')
        svg.removeAttribute('version')
        svg.removeAttribute('width')
        svg.removeAttribute('height')

        return svg.toString().trim()
      }),
    )

    const output = [
      `<?xml version="1.0" encoding="UTF-8"?>`,
      `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">`,
      `<defs>`,
      ...symbols,
      `</defs>`,
      `</svg>`,
      '', // trailing newline
    ].join('\n')

    return writeIfChanged(outputPath, output)
  }

  async function writeIfChanged(filepath: string, newContent: string) {
    const currentContent = await fsExtra.readFile(filepath, 'utf8').catch(() => '')
    if (currentContent === newContent) return false
    await fsExtra.writeFile(filepath, newContent, 'utf8')
    return true
  }
}

main()
